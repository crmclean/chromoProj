apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
peakTables[[1]] %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
}) %>%
head()
groups <- c("blank", "blank", "QV", "QV", "CSW", "CSW")
organizedPeaks <- peakTables %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
organizedPeaks
organizedPeaks <- peakTables %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
library(dplyr)
files <- list.files(".", pattern = ".csv")
peakTables <- lapply(files, read.csv)
organizedPeaks <- peakTables %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
peakTables %>% select(mz, contains("2016_09_12"))
peakTables
organizedPeaks <- list()
for(i in 1:length(peakTables)) {
organizedPeaks[[i]] <- peakTables %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
}
organizedPeaks <- list()
for(i in 1:length(peakTables)) {
organizedPeaks[[i]] <- peakTables[[i]] %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
}
organizedPeaks
groups <- c("blank", "blank", "QV", "QV", "CSW", "CSW")
example <- read.csv("~/MIT/Research/MMETSP_Project/data/2018-03-18/mtabAnalyst_input/mtabAnalyst_caf_neg_t-test_N.txt")
example
example <- read.table("~/MIT/Research/MMETSP_Project/data/2018-03-18/mtabAnalyst_input/mtabAnalyst_caf_neg_t-test_N.txt")
example
example <- read.table("~/MIT/Research/MMETSP_Project/data/2018-03-18/mtabAnalyst_input/mtabAnalyst_caf_neg_t-test_N.txt", header = T)
example
organizedPeaks[[i]]$p.value <- sample(example$p.value, replace = T)
sample(example$p.value, replace = T)
sample(example$t.score, replace = T)
organizedPeaks <- list()
for(i in 1:length(peakTables)) {
peakSub <- peakTables[[i]] %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
peakSub$p.value <- sample(example$p.value, replace = T)
peakSub$t.score <- sample(example$t.score, replace = T)
organizedPeaks[[i]] <- peakSub
rm(peakSub)
}
peakSub
organizedPeaks
rm(organizedPeaks)
i
i <- 1
peakSub <- peakTables[[i]] %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
})
peakSub
peakSub <- peakTables[[i]] %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
}) %>%
as.data.frame()
peakSub
peakSub$p.value <- sample(example$p.value, replace = T)
peakSub$p.value <- sample(example$p.value, n = nrow(peakSub), replace = T)
peakSub$t.score <- sample(example$t.score, n = nrow(peakSub), replace = T)
sample(example$p.value, n = nrow(peakSub), replace = T)
?sample
sample(example$p.value, size = nrow(peakSub), replace = T)
sample(example$p.value, size = nrow(peakSub), replace = T)
peakSub$p.value <- sample(example$p.value, size = nrow(peakSub), replace = T)
peakSub$t.score <- sample(example$t.score, size = nrow(peakSub), replace = T)
organizedPeaks <- list()
for(i in 1:length(peakTables)) {
peakSub <- peakTables[[i]] %>% select(mz, contains("2016_09_12")) %>%
apply(2, function(col) {
col[is.na(col)] <- 0
return(col)
}) %>%
as.data.frame()
peakSub$p.value <- sample(example$p.value, size = nrow(peakSub), replace = T)
peakSub$t.score <- sample(example$t.score, size = nrow(peakSub), replace = T)
organizedPeaks[[i]] <- peakSub
rm(peakSub)
}
organizedPeaks
colnames(organizedPeaks[[1]])
peakTables
files
file.path(outPath, paste("metaboIn", files[i], sep = "_"))
outPath <- "data/2018-04-18/metaboAnalyst_Input"
file.path(outPath, paste("metaboIn", files[i], sep = "_"))
outPath <- "data/2018-04-18/metaboAnalyst_Input"
for(i in 1:length(organizedPeaks)) {
curTable <- organizedPeaks[[i]] %>% select(mz, p.value, t.score)
export <- file.path(outPath, paste("metaboIn", files[i], sep = "_"))
write.table(curTable, export)
}
for(i in 1:length(organizedPeaks)) {
curTable <- organizedPeaks[[i]] %>% select(mz, p.value, t.score)
export <- file.path(outPath, paste0("metaboIn", basename(files[i]), ".txt"))
write.table(curTable, export)
}
source('~/MIT/Research/chromoProj/makeKeggTables.R', echo=TRUE)
source('~/MIT/Research/chromoProj/makeKeggTables.R', echo=TRUE)
source('~/MIT/Research/chromoProj/makeKeggTables.R', echo=TRUE)
source('~/MIT/Research/chromoProj/makeKeggTables.R', echo=TRUE)
library(here)
library(dplyr)
path2Data <- read.csv("data/2018-04-18/metaboAnalyst_Out/mummichog_matched_compound_all.csv")
path2Data
unique(path2Data$Matched.Compound)
checkCps <- unique(path2Data$Matched.Compound)
library(KEGGREST)
keggFind("cpd", checkCpds[1])
checkCpds <- unique(path2Data$Matched.Compound)
keggFind("cpd", checkCpds[1])
keggGet("cpd", checkCpds[1])
?keggLink
keggLink(target = checkCpds[1], source = "pathway")
keggLink(target = checkCpds[1], source = "module")
keggLink("module", checkCpds[1])
keggLink("pathway", checkCpds[1])
pathways <- keggLink("pathway", checkCpds[1])
keggList(pathways[1])
keggList(pathways)
keggLink("reaction", checkCpds[1])
reactions <- keggLink("reaction", checkCpds[1])
keggList(reactions)
checkCpds
i
keggFind("cpd", checkCpds[i])
cpdName <- keggFind("cpd", checkCpds[i])
cpdInfo <- list()
pathways <- keggLink("pathway", checkCpds[i])
cpdInfo[[i]] <- pathways
names(cpdInfo)[i] <- cpdName
names(cpdInfo)[i]
cpdInfo
pathwayNames <- keggList(pathways)
pathwayNames
cpdInfo <- list()
for(i in 1:length(checkCpds)) {
cpdName <- keggFind("cpd", checkCpds[i])
pathways <- keggLink("pathway", checkCpds[i])
pathwayNames <- keggList(pathways)
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- cpdName
}
library(foreach)
cpdInfo <- list()
cpdInfo <- foreach(i = 1:length(checkCpds)) %dopar% {
cpdName <- keggFind("cpd", checkCpds[i])
pathways <- keggLink("pathway", checkCpds[i])
pathwayNames <- keggList(pathways)
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- cpdName
cpdInfo
}
library(doMC)
registerDoMC(cores=4)
cpdInfo <- list()
cpdInfo <- foreach(i = 1:length(checkCpds)) %dopar% {
cpdName <- keggFind("cpd", checkCpds[i])
pathways <- keggLink("pathway", checkCpds[i])
pathwayNames <- keggList(pathways)
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- cpdName
cpdInfo
}
cpdName
pathways
pathwayNames
cpdInfo
cpdName
paste(names(cpdName), cpdName, sep = ":")
paste(names(cpdName), cpdName, sep = ":=")
cpdInfo <- list()
for(i in 1:length(checkCpds)) {
cpdName <- keggFind("cpd", checkCpds[i])
pathways <- keggLink("pathway", checkCpds[i])
pathwayNames <- keggList(pathways)
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- paste(names(cpdName), cpdName, sep = ":=")
}
i
pathwayNames
cpdName
cpdInfo
sleep(1)
Sys.sleep(1)
msconvert <-
"poop"
paste(msconvert, "--mzML --filter \"peakPicking true 1-3\" --filter \"msLevel 1-3\" -o mzML_noThreshold")
i
cpdName <- keggFind("cpd", checkCpds[i])
pathways <- keggLink("pathway", checkCpds[i])
pathwayNames <- keggList(pathways)
keggList(pathways)
tryCatch(keggList(pathways), error = "No Match")
tryCatch(keggList(pathways), error = function(e) "No Match")
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("pathway", checkCpds[i]), error = function(e) "No pathway match")
pathwayNames <- tryCatch(keggList(pathways), error = function(e) "No pathway name match")
cpdInfo[[i]] <- pathwayNames
pathways
cpdInfo <- list()
for(i in 1:length(checkCpds)) {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("pathway", checkCpds[i]), error = function(e) "No pathway match")
if(length(pathways) == 0) {
pathwayNames <- "No Pathway match"
} else {
pathwayNames <- tryCatch(keggList(pathways), error = function(e) "No pathway name match")
}
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- paste(names(cpdName), cpdName, sep = ":=")
Sys.sleep(1)
}
cpdInfo
devtools::install_github('wilsontom/MRMConverteR')
library(MRMConverteR)
library(here)
convertFiles <- list.files(here("data/2018-04-18/rawData/srmData/"), pattern = ".mzML")
convertFiles
path2data <- here("data/2018-04-18/rawData/srmData/")
convertFiles <- list.files(path2data, pattern = ".mzML")
convertFiles
file.path(path2data,convertFiles)
path2data <- here("data/2018-04-18/rawData/srmData/")
convertFiles <- list.files(path2data, pattern = ".mzML")
for(file in file.path(path2data,convertFiles)) {
convert(file, path2data, return = FALSE)
}
?convert
library(mzR)
openMSfile(file.path(path2data,convertFiles)[1])
MRMfile <- openMSfile(file.path(path2data,convertFiles)[1])
nChrom(MRMfile)
MRMfile <- openMSfile(file.path(path2data,convertFiles)[1])
nChrom(MRMfile)
for(file in file.path(path2data,convertFiles)) {
convert(file, path2data, return = FALSE)
}
mzR::chromatograms(MRMfile)
chrom_raw <- mzR::chromatograms(MRMfile)
chrom_raw
filter_id <- purrr::map(chrom_raw, ~ {
names(.)[[2]]
}) %>% unlist(.)
filter_id
filter_polarity <- purrr::map_dbl(filter_id, extract_polarity)
install.packages("purrr")
install.packages("purrr")
filter_polarity <- purrr::map_dbl(filter_id, extract_polarity)
library(MRMConverteR)
library(mzR)
filter_polarity <- purrr::map_dbl(filter_id, extract_polarity)
?map_dbl
??extract_polarity
source('~/MIT/Research/chromoProj/checkKeggCpds.R', echo=TRUE)
cpdInfo[[1]]
cpdInfo[[i]]
i
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
plyr::ldply(cpdTable, data.frame)
length(cpdInfo)
i
library(doMC)
registerDoMC(cores=4)
registerDoMC(cores=3)
cpdInfo <- list()
foreach::foreach(i = 1:length(checkCpds))  %dopar% {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("pathway", checkCpds[i]), error = function(e) "No pathway match")
if(length(pathways) == 0) {
pathwayNames <- "No Pathway match"
} else {
pathwayNames <- tryCatch(keggList(pathways), error = function(e) "No pathway name match")
}
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- paste(names(cpdName), cpdName, sep = ":=")
Sys.sleep(1)
}
source('~/MIT/Research/xcmsAutotuner/functions/checkEICPeaks.R', echo=TRUE)
cpdInfo <- foreach::foreach(i = 1:3)  %dopar% {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("pathway", checkCpds[i]), error = function(e) "No pathway match")
if(length(pathways) == 0) {
pathwayNames <- "No Pathway match"
} else {
pathwayNames <- tryCatch(keggList(pathways), error = function(e) "No pathway name match")
}
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- paste(names(cpdName), cpdName, sep = ":=")
Sys.sleep(1)
cpdInfo[[i]]
}
cpdInfo <- list()
cpdInfo <- foreach::foreach(i = 1:3)  %dopar% {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("pathway", checkCpds[i]), error = function(e) "No pathway match")
if(length(pathways) == 0) {
pathwayNames <- "No Pathway match"
} else {
pathwayNames <- tryCatch(keggList(pathways), error = function(e) "No pathway name match")
}
cpdInfo[[i]] <- pathwayNames
names(cpdInfo)[i] <- paste(names(cpdName), cpdName, sep = ":=")
Sys.sleep(1)
cpdInfo[[i]]
}
cpdInfo
cpdInfo <- list()
cpdInfo <- foreach::foreach(i = 1:length(checkCpds))  %dopar% {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("pathway", checkCpds[i]), error = function(e) "No pathway match")
if(length(pathways) == 0) {
pathwayNames <- "No Pathway match"
} else {
pathwayNames <- tryCatch(keggList(pathways), error = function(e) "No pathway name match")
}
pathwayNames
}
cpdInfo
moduleInfo <- list()
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("module", checkCpds[i]), error = function(e) "No pathway match")
pathways
pathways <- tryCatch(keggLink("modules", checkCpds[i]), error = function(e) "No pathway match")
pathways
i <- 1
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("modules", checkCpds[i]), error = function(e) "No pathway match")
pathways
cpdName
checkCpds[i]
i <- 100
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("modules", checkCpds[i]), error = function(e) "No pathway match")
pathways
pathways <- tryCatch(keggLink("module", checkCpds[i]), error = function(e) "No pathway match")
pathways
i <-33
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
pathways <- tryCatch(keggLink("module", checkCpds[i]), error = function(e) "No pathway match")
pathways
?keggLink
listDatabases()
moduleInfo <- list()
moduleInfo <- foreach::foreach(i = 1:length(checkCpds))  %dopar% {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
module <- tryCatch(keggLink("module", checkCpds[i]), error = function(e) "No module match")
if(length(pathways) == 0) {
pathwayNames <- "No Pathway match"
} else {
modNames <- tryCatch(keggList(module), error = function(e) "No module name match")
}
modNames
}
moduleInfo
moduleInfo <- list()
moduleInfo <- foreach::foreach(i = 1:length(checkCpds))  %dopar% {
cpdName <- tryCatch(keggFind("cpd", checkCpds[i]), error = function(e) "No cpd match")
module <- tryCatch(keggLink("module", checkCpds[i]), error = function(e) "No module match")
if(length(pathways) == 0) {
modNames <- "No module match"
} else {
modNames <- tryCatch(keggList(module), error = function(e) "No module name match")
}
modNames
}
moduleInfo
cpdInfo
path2Data
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
cpdName
cpdInfo
checkCpds[i]
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- checkCpds[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
plyr::ldply(cpdTable, data.frame)
pathwayTable <- plyr::ldply(cpdTable, data.frame)
pathwayTable
table(pathwayTable)
table(apply(pathwayTable, 1, paste, sep = "_"))
apply(pathwayTable, 1, paste, sep = "_")
pathwayTable
paste(pathwayTable$cpdName, pathwayTable$paths, sep = "_")
table(paste(pathwayTable$cpdName, pathwayTable$paths, sep = "_"))
cpdPathCounts <- table(paste(pathwayTable$cpdName, pathwayTable$paths, sep = "_"))
cpdPathCounts > 1
cpdPathCounts[cpdPathCounts > 1]
pathwayTable
checkCpds
path2Data
table(path2Data$Matched.Compound )
as.numeric(table(path2Data$Matched.Compound))
pathwayTable
colnames(pathwayTable)
path2Data
path2Data %>% colnames()
colnames(pathwayTable)[1] <- "Matched.Compound"
path2Data
dplyr::left_join(pathwayTable, path2Data, "Matched.Compound")
dplyr::left_join(pathwayTable, path2Data, "Matched.Compound") %>% View()
cpdTable
dplyr::full_join(pathwayTable, path2Data, "Matched.Compound") %>% View()
cpdPathTable <- dplyr::full_join(pathwayTable, path2Data, "Matched.Compound") %>% View()
cpdPathTable <- dplyr::full_join(pathwayTable, path2Data, "Matched.Compound")
cpdPathTable$paths %>% unique()
test <- cpdPathTable$paths %>% unique()
grep(test, pattern = "meth")
test[grep(test, pattern = "meth")]
test[grep(test, pattern = "Methane")]
grep(test, pattern = "Methane")
cpdPathTable %>% colnames()
test <- cpdPathTable %>% filter(paths = "Methane metabolism")
test <- cpdPathTable %>% filter(paths == "Methane metabolism")
test
(445.171 - 444.1583)/445.171
(445.171 - 444.1583)/445.171 * 10^6
(445.171 - 444.1583)/445.171
(445.171 - 444.1583)/445.171 * 10^6
(445.171 - 444.1583 + 1.0078)/445.171 * 10^6
(445.171 - 444.1583 - 1.0078)/445.171 * 10^6
cpdPathTable$Matched.Compound == "C00199"
any(cpdPathTable$Matched.Compound == "C00199")
test
cpdPathTable %>% mutate(ppm = Query.Mass/Mass.Diff * 10^6)
cpdPathTable %>% mutate(ppm = Query.Mass/Mass.Diff * 10^6)
cpdPathTable %>% mutate(ppm = Mass.Diff/Query.Mass * 10^6)
cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6))
cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6)) %>% mutate(Mass.Diff == NULL)
cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6)) %>% select(-one_of(Mass.Diff))
cpdPathTable <- cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6))
cpdPathTable
unique(cpdPathTable)
cpdPathTable
unique(cpdPathTable)
cpdPathTable <- unique(cpdPathTable)
cpdPathTable$ppm %>% hist()
cpdPathTable
cpdPathTable %>% head()
cpdPathTable <- unique(cpdPathTable[,-5])
cpdPathTable
cpdPathTable %>% head()
cpdPathTable %>% head(n = 2)
cpdPathTable %>% head(n = 20)
cpdPathTable
cpdPathTable$paths
grep(cpdPathTable$paths, "Carbon Fixation", ignore.case = T)
cpdPathTable$paths
grep("Carbon Fixation",cpdPathTable$paths, ignore.case = T)
cpdPathTable$paths[grep("Carbon Fixation",cpdPathTable$paths, ignore.case = T)]
cpdPathTable$paths[grep("Carbon fixation pathways in prokaryotes",
cpdPathTable$paths, ignore.case = T)]
cpdPathTable[grep("Carbon fixation pathways in prokaryotes",
cpdPathTable$paths, ignore.case = T),]
cpdPathTable[grep("Methane", cpdPathTable$paths, ignore.case = T),]
cpdPathTable[grep("Oxocarboxylic acid", cpdPathTable$paths, ignore.case = T),]
