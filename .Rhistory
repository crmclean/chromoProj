if(length(pathways) == 0) {
modNames <- "No module match"
} else {
modNames <- tryCatch(keggList(module), error = function(e) "No module name match")
}
modNames
}
moduleInfo
cpdInfo
path2Data
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- names(cpdInfo)[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
cpdName
cpdInfo
checkCpds[i]
cpdTable <- list()
for(i in 1:length(cpdInfo)) {
cpdName <- checkCpds[i]
paths <- cpdInfo[[i]]
cpdTable[[i]] <- data.frame(cpdName, paths)
}
plyr::ldply(cpdTable, data.frame)
pathwayTable <- plyr::ldply(cpdTable, data.frame)
pathwayTable
table(pathwayTable)
table(apply(pathwayTable, 1, paste, sep = "_"))
apply(pathwayTable, 1, paste, sep = "_")
pathwayTable
paste(pathwayTable$cpdName, pathwayTable$paths, sep = "_")
table(paste(pathwayTable$cpdName, pathwayTable$paths, sep = "_"))
cpdPathCounts <- table(paste(pathwayTable$cpdName, pathwayTable$paths, sep = "_"))
cpdPathCounts > 1
cpdPathCounts[cpdPathCounts > 1]
pathwayTable
checkCpds
path2Data
table(path2Data$Matched.Compound )
as.numeric(table(path2Data$Matched.Compound))
pathwayTable
colnames(pathwayTable)
path2Data
path2Data %>% colnames()
colnames(pathwayTable)[1] <- "Matched.Compound"
path2Data
dplyr::left_join(pathwayTable, path2Data, "Matched.Compound")
dplyr::left_join(pathwayTable, path2Data, "Matched.Compound") %>% View()
cpdTable
dplyr::full_join(pathwayTable, path2Data, "Matched.Compound") %>% View()
cpdPathTable <- dplyr::full_join(pathwayTable, path2Data, "Matched.Compound") %>% View()
cpdPathTable <- dplyr::full_join(pathwayTable, path2Data, "Matched.Compound")
cpdPathTable$paths %>% unique()
test <- cpdPathTable$paths %>% unique()
grep(test, pattern = "meth")
test[grep(test, pattern = "meth")]
test[grep(test, pattern = "Methane")]
grep(test, pattern = "Methane")
cpdPathTable %>% colnames()
test <- cpdPathTable %>% filter(paths = "Methane metabolism")
test <- cpdPathTable %>% filter(paths == "Methane metabolism")
test
(445.171 - 444.1583)/445.171
(445.171 - 444.1583)/445.171 * 10^6
(445.171 - 444.1583)/445.171
(445.171 - 444.1583)/445.171 * 10^6
(445.171 - 444.1583 + 1.0078)/445.171 * 10^6
(445.171 - 444.1583 - 1.0078)/445.171 * 10^6
cpdPathTable$Matched.Compound == "C00199"
any(cpdPathTable$Matched.Compound == "C00199")
test
cpdPathTable %>% mutate(ppm = Query.Mass/Mass.Diff * 10^6)
cpdPathTable %>% mutate(ppm = Query.Mass/Mass.Diff * 10^6)
cpdPathTable %>% mutate(ppm = Mass.Diff/Query.Mass * 10^6)
cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6))
cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6)) %>% mutate(Mass.Diff == NULL)
cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6)) %>% select(-one_of(Mass.Diff))
cpdPathTable <- cpdPathTable %>% mutate(ppm = round(Mass.Diff/Query.Mass * 10^6))
cpdPathTable
unique(cpdPathTable)
cpdPathTable
unique(cpdPathTable)
cpdPathTable <- unique(cpdPathTable)
cpdPathTable$ppm %>% hist()
cpdPathTable
cpdPathTable %>% head()
cpdPathTable <- unique(cpdPathTable[,-5])
cpdPathTable
cpdPathTable %>% head()
cpdPathTable %>% head(n = 2)
cpdPathTable %>% head(n = 20)
cpdPathTable
cpdPathTable$paths
grep(cpdPathTable$paths, "Carbon Fixation", ignore.case = T)
cpdPathTable$paths
grep("Carbon Fixation",cpdPathTable$paths, ignore.case = T)
cpdPathTable$paths[grep("Carbon Fixation",cpdPathTable$paths, ignore.case = T)]
cpdPathTable$paths[grep("Carbon fixation pathways in prokaryotes",
cpdPathTable$paths, ignore.case = T)]
cpdPathTable[grep("Carbon fixation pathways in prokaryotes",
cpdPathTable$paths, ignore.case = T),]
cpdPathTable[grep("Methane", cpdPathTable$paths, ignore.case = T),]
cpdPathTable[grep("Oxocarboxylic acid", cpdPathTable$paths, ignore.case = T),]
library(dplyr)
library(dplyr)
library(here)
source("~/MIT/Research/MMETSP_Project/scr/2017-12-16/QA/mtabQA.R")
# Loading metadata and real data ------------------------------------------
runfile <- read.csv(here("data/CROMO_11_metadata.csv"), stringsAsFactors = F)
# path to files
## change this path every time
data <- read.csv(here("data/2018-04-18/metaboAnalyst_Input/chromoPeaks.csv"))
qaOutput <- mtabQA(data = dataList, metadata = runfile)
dataList2 <- qaOutput$data
source("~/MIT/Research/MMETSP_Project/scr/2017-12-16/QA/mtabQA.R")
# Loading metadata and real data ------------------------------------------
runfile <- read.csv(here("data/CROMO_11_metadata.csv"), stringsAsFactors = F)
# path to files
## change this path every time
data <- read.csv(here("data/2018-04-18/metaboAnalyst_Input/chromoPeaks.csv"))
data
data %>% head()
runfile$Type
runfile$Well
runfile$Sample.Name[runfile$Well %in% "blank"]
runfile$Sample.Name[runfile$Well %in% "Blank"]
data
data %>% colnames()
colnames(data) %in% runfile$Sample.Name[runfile$Well %in% "Blank"]
blankCols <- which(colnames(data) %in% runfile$Sample.Name[runfile$Well %in% "Blank"] )
blankCols <- colnames(data)[colnames(data) %in% runfile$Sample.Name[runfile$Well %in% "Blank"]]
blankCols
colId <- sub("_00[0-9]", "", blankCols[1])
colId
curCol
blankCols
colId
curCol
blankCols
colId
blankCols <- colnames(data)[colnames(data) %in% runfile$Sample.Name[runfile$Well %in% "Blank"]]
colId <- sub("_00[0-9]", "", blankCols[1])
for(curCol in blankCols) {
blankCol <- data[,colnames(data) %in% curCol]
blankType <- runfile$Type[runfile$Well == curCol]
removeRows <- which(!is.na(blankCol))
correctData <- colnames(data) %in% runfile$Sample.Name[runfile$Type %in% blankType]
data[removeRows,correctData] <- NA
}
data
grep(colId, colnames(data))
data[,grep(colId, colnames(data))]
data[,grep(colId, colnames(data))] %>% apply(1, function(row) {sum(is.na(row)) == length(row)})
data[,grep(colId, colnames(data))] %>% apply(1, function(row) {sum(is.na(row)) == length(row)}) %>% sum()
data[,grep(colId, colnames(data))]
data[1,grep(colId, colnames(data))]
rowtest <- data[1,grep(colId, colnames(data))]
is.na(rowtest)
data[,grep(colId, colnames(data))] %>% apply(1, function(row) {print(class(row));
sum(is.na(row)) == length(row)})
data
# Loading metadata and real data ------------------------------------------
runfile <- read.csv(here("data/CROMO_11_metadata.csv"), stringsAsFactors = F)
data <- read.csv(here("data/2018-04-18/metaboAnalyst_Input/chromoPeaks.csv"))
data %>% View()
data %>% View()
data[82,]
removeRows
correctData
colnames(data)
runfile$Sample.Name[runfile$Type %in% blankType]
runfile$Type
blankType
curCol
blankCol <- data[,colnames(data) %in% curCol]
blankCol
blankType <- runfile$Type[runfile$Well == curCol]
blankType
runfile$Well == curCol
curCol
runfile$Sample.Name == curCol
blankType <- runfile$Type[runfile$Sample.Name == curCol]
blankType
removeRows <- which(!is.na(blankCol))
removeRows
## determining which columns are same type as blank to correct
blankType <- runfile$Type[runfile$Sample.Name == curCol]
correctData <- colnames(data) %in% runfile$Sample.Name[runfile$Type %in% blankType]
correctData
data[removeRows,correctData]
blankCols <- colnames(data)[colnames(data) %in% runfile$Sample.Name[runfile$Well %in% "Blank"]]
colId <- sub("_00[0-9]", "", blankCols[1])
for(curCol in blankCols) {
## determining type of blank
blankCol <- data[,colnames(data) %in% curCol]
removeRows <- which(!is.na(blankCol))
## determining which columns are same type as blank to correct
blankType <- runfile$Type[runfile$Sample.Name == curCol]
correctData <- colnames(data) %in% runfile$Sample.Name[runfile$Type %in% blankType]
## correcting the data
data[removeRows,correctData] <- NA
}
data
data[,grep(colId, colnames(data))] %>% apply(1, function(row) {sum(is.na(row)) == length(row)})
data[,grep(colId, colnames(data))] %>% apply(1, function(row) {sum(is.na(row)) == length(row)}) %>% sum()
removeRows <- data[,grep(colId, colnames(data))] %>%
apply(1, function(row) {sum(is.na(row)) == length(row)})
removeRows
removeRows %>% sum()
message("Total rows removed through blank correction:" sum(removeRows))
message("Total rows removed through blank correction:", sum(removeRows))
message("Total rows removed through blank correction: ", sum(removeRows))
TripleVennDiagram
??TripleVennDiagram
library(limma)
colId
grep(colId, colnames(data))
blankCol
blankCols
blankMatches <- colnames(data) %in% runfile$Sample.Name[runfile$Well %in% "Blank"]
blankMatches
grep(colId, colnames(data))
which(blankMatches)
grep(colId, colnames(data))[-which(blankMatches)]
# QA on data --------------------------------------------------------------
dataCols <- grep(colId, colnames(data))
dataCols
blankMatches
blankCols
dataCols
dataCols %in% which(blankMatches)
!dataCols %in% which(blankMatches)
dataCols[!dataCols %in% which(blankMatches)]
featureCols <- data[,dataCols[!dataCols %in% which(blankMatches)]]
featureCols
dataObservations <- data[,dataCols[!dataCols %in% which(blankMatches)]]
dataObservations
apply(dataObservations, 2, function(col) {
col[is.na(col)] <- 0
return(col)
})
dataObservations <- apply(dataObservations, 2, function(col) {
col[is.na(col)] <- 0
return(col)
})
dataObservations
# venn diagram ------------------------------------------------------------
obsFeatureColunts %>% apply(2, function(col > 0))
# venn diagram ------------------------------------------------------------
obsFeatureColunts %>% apply(2, function(col) {col > 0})
# venn diagram ------------------------------------------------------------
dataObservations %>% apply(2, function(col) {col > 0})
# venn diagram ------------------------------------------------------------
featureCounts <- dataObservations %>% apply(2, function(col) {col > 0})
vennCounts(featureCounts)
dataObservations %>% nrow()
vennDiagram(vennCounts(featureCounts))
vennCountTable <- vennCounts(featureCounts)
runfile
#colnames(vennCountTable) <- c()
vennDiagram(vennCountTable)
colnames(vennCountTable) <- c("CSW intracellular",
"CSW DOC",
"QV intracellular",
"QV DOC")
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
colnames(vennCountTable)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
?vennDiagram
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(2,4))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.5,4))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1,1,1))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1,1))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.1,1))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.1,3))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1,1))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.1,1,1))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1,1))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1,1),
counts.col = )
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1,1.2))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1,1.2,1.2))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.2,1.2))
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.2,1.2),
show.include = F)
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.2,1.2),
show.include = F)
fix(vennDiagram)
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.2,1.2),
show.include = F)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.1,4),
cex = c(1.2,1.2,1.2),
show.include = F)
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.01,4),
cex = c(1.2,1.2,1.2),
show.include = F)
vennDiagram(vennCountTable, circle.col = c("blue", "blue", "orange", "orange"),
mar = rep(0.01,4),
cex = c(1.2,1.2,1.2),
show.include = F)
data[,colnames(data) %in% c("mz","rt")]
densityData <- data[,colnames(data) %in% c("mz","rt")]
plot(densityData$mz, densityData$rt)
reshape2::melt(data = data)
?melt
colan
colnames(data)
reshape2::melt(data = data, id.vars = c("mz", "rt"), measure.vars = c("XS1_2016_09_12_LS_001",
"XS1_2016_09_12_LS_002",
"XS1_2016_09_12_LS_003",
"XS1_2016_09_12_LS_004",
"XS1_2016_09_12_LS_005",
"XS1_2016_09_12_LS_006"))
meltedData <- reshape2::melt(data = data, id.vars = c("mz", "rt"), measure.vars = c("XS1_2016_09_12_LS_001",
"XS1_2016_09_12_LS_002",
"XS1_2016_09_12_LS_003",
"XS1_2016_09_12_LS_004",
"XS1_2016_09_12_LS_005",
"XS1_2016_09_12_LS_006"))
meltedData$value
meltedData[!is.na(meltedData$value),]
meltedDataSub <- meltedData[!is.na(meltedData$value),]
?ggple
?ggplot
library(tidyverse)
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_dotplot()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point() +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point() +
theme_minimal(labels = c("CSW intracellular","CSW DOC","QV intracellular", "QV DOC"))
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable, labels = c("CSW intracellular","CSW DOC","QV intracellular", "QV DOC"))) +
geom_point() +
theme_minimal()
meltedData <- reshape2::melt(data = data, id.vars = c("mz", "rt"), measure.vars = c(
"XS1_2016_09_12_LS_003",
"XS1_2016_09_12_LS_004",
"XS1_2016_09_12_LS_005",
"XS1_2016_09_12_LS_006"))
meltedDataSub <- meltedData[!is.na(meltedData$value),]
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable, )) +
geom_point() +
theme_minimal()
meltedData
data
data %>% head()
source('~/MIT/Research/chromoProj/scr/2018-04-20/dataViz/densityPlot.R', echo=TRUE)
colnames(data)
colnames(data)[14:17]
colnames(data)[14:17] <- c("CSW intracellular","CSW DOC", "QV intracellular", "QV DOC")
colnames(data)[14:17] <- c("CSW intracellular","CSW DOC", "QV intracellular", "QV DOC")
meltedData <- reshape2::melt(data = data, id.vars = c("mz", "rt"), measure.vars = c("CSW intracellular",
"CSW DOC",
"QV intracellular",
"QV DOC"))
meltedData
meltedDataSub <- meltedData[!is.na(meltedData$value),]
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point() +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable, size = 1)) +
geom_point() +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable, size = 0.01)) +
geom_point() +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable, fill = NA)) +
geom_point() +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable, fill = NA)) +
geom_point() +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 0.1, stroke = 0, shape = 16) +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 0.5, stroke = 0, shape = 16) +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0, shape = 16) +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 1, shape = 16) +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.5, shape = 16) +
theme_minimal()
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.5, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention time (seconds)") +
ggtitle("Density plot of observed features across Samples")
meltedDataSub <- meltedData[!is.na(meltedData$value),]
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.75, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention Time (seconds)") +
ggtitle("Density plot of observed features across Samples")
source('~/MIT/Research/chromoProj/scr/2018-04-20/dataViz/densityPlot.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-20/dataViz/densityPlot.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-20/dataViz/densityPlot.R', echo=TRUE)
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.5, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention Time (seconds)") +
ggtitle("Density Plot of Observed Features Across Samples") +
guides(colour = guide_legend(override.aes = list(size=10)))
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.5, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention Time (seconds)") +
ggtitle("Density Plot of Observed Features Across Samples") +
guides(colour = guide_legend(override.aes = list(size=5)))
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.5, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention Time (seconds)") +
ggtitle("Density Plot of Observed Features Across Samples") +
guides(colour = guide_legend(override.aes = list(size=3)))
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = 1, stroke = 0.25, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention Time (seconds)") +
ggtitle("Density Plot of Observed Features Across Samples") +
guides(colour = guide_legend(override.aes = list(size=3)))
ggplot(meltedDataSub, mapping = aes(x = mz, y = rt, col = variable)) +
geom_point(size = .75, stroke = 0.25, shape = 16) +
theme_minimal() +
xlab("M/Z ratio") +
ylab("Retention Time (seconds)") +
ggtitle("Density Plot of Observed Features Across Samples") +
guides(colour = guide_legend(override.aes = list(size=3)))
source('~/MIT/Research/chromoProj/scr/2018-04-20/dataViz/densityPlot.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
?col2rgb
vennDiagram(vennCountTable, circle.col = c("lightblue", "darkblue", "darkorange", "darkorange4"),
mar = rep(0.01,4),
cex = c(1.2,1.2,1.2),
show.include = F)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
?vennDiagram
?par
vennDiagram(vennCountTable, circle.col = c("lightblue", "lightblue4", "darkorange", "darkorange4"),
mar = rep(0.01,4),
cex = c(1.2,1.2,1.2),
show.include = F)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
source('~/MIT/Research/chromoProj/scr/2018-04-19/data_viz/venn_diagram.R', echo=TRUE)
